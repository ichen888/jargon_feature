import pandas as pd
import requests
from bs4 import BeautifulSoup

def scrape_berlitz_slang(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")

    data = []
    entries = soup.find_all("tr")
    for entry in entries:
        columns = entry.find_all("td")
        if len(columns) == 2:
            word = columns[0].text.strip()
            meaning = columns[1].text.strip()
            data.append([word, meaning])

    df = pd.DataFrame(data, columns=['Word', 'Meaning'])
    return df

# URL of the Berlitz page with American slang words
url = "https://www.berlitz.com/blog/american-slang-words"
slang_df = scrape_berlitz_slang(url)

# Create Translation Function
def get_corporate_bs(phrase):
    """Gets corporate BS from the API based on the input phrase.

    Args:
        phrase: The phrase to use as input for the API.

    Returns:
        The corporate BS generated by the API.
    """
    try:
        response = requests.get("https://corporatebs-generator.sameerkumar.website/")
        response.raise_for_status()  # Raise an exception for bad status codes
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"Error fetching corporate BS: {e}")
        return None

# Generate Corporate Translations for the common slang
corporate_bs_phrases = []
corporate_bs_definitions = []

for index, row in slang_df.iterrows():
    word = row['Word']
    meaning = row['Meaning']

    corporate_bs_phrase = get_corporate_bs(word)
    corporate_bs_definition = get_corporate_bs(meaning)

    corporate_bs_phrases.append(corporate_bs_phrase if corporate_bs_phrase else "Failed to generate")
    corporate_bs_definitions.append(corporate_bs_definition if corporate_bs_definition else "Failed to generate")

# Add the new columns to the DataFrame
slang_df['Corporate Direct Translation'] = corporate_bs_phrases
slang_df['Corporate Definition'] = corporate_bs_definitions

# Print the updated DataFrame
print("We've compiled the Dataframe")
print(slang_df)

#Create the function that searches through the data frame
def search_and_print_slang():
  """Searches the slang DataFrame for a user-inputted word and prints its meaning,
  corporate translation, and definition. If the word isn't found, it generates
  corporate BS for the word."""
  user_input = input("Enter a slang word: ")
  user_input_lower = user_input.lower()

  found = False
  for index, row in slang_df.iterrows():
    if row['Word'].lower() == user_input_lower:
      print(f"Meaning: {row['Meaning']}")
      print(f"Corporate Direct Translation: {row['Corporate Direct Translation']}")
      print(f"Corporate Definition: {row['Corporate Definition']}")
      found = True
      break

  if not found:
    corporate_bs_phrase = get_corporate_bs(user_input)
    if corporate_bs_phrase:
      print("Word not found in database.")
      print("Generated Corporate BS:")
      print(corporate_bs_phrase)
    else:
      print("Word not found in database and failed to generate corporate BS.")

# Call the function to start the search and print process
search_and_print_slang()
